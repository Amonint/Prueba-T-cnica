services:
  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: mini-asistente-backend
    ports:
      - "8000:8000"
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-AIzaSyAK5olZHZd56D-DHZ769d_CMqwcmINRCkU}
      - LOCATION=${LOCATION:-us-central1}
      - GEMINI_MODEL=${GEMINI_MODEL:-gemini-2.0-flash-exp}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-models/text-embedding-004}
      - DEBUG=${DEBUG:-false}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-10485760}
      - ALLOWED_EXTENSIONS=${ALLOWED_EXTENSIONS:-pdf,txt}
      - MAX_FILES=${MAX_FILES:-10}
      - VECTOR_STORE_PATH=/app/data/vectors
      - DOCUMENTS_PATH=/app/data/documents
      - FRONTEND_URL=http://localhost:3000
      - BACKEND_URL=http://localhost:8000
      - CHUNK_SIZE=4000
      - CHUNK_OVERLAP=200
      - SIMILARITY_THRESHOLD=0.4
      - SEARCH_LIMIT=5
    volumes:
      - ./backend:/app
      - backend_data:/app/data
      - backend_logs:/app/logs
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - mini-asistente-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Next.js Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: mini-asistente-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - HOSTNAME=mini-asistente-frontend
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - mini-asistente-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: mini-asistente-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - mini-asistente-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: mini-asistente-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - mini-asistente-network
    profiles:
      - production

# Named volumes for data persistence
volumes:
  backend_data:
    driver: local
  backend_logs:
    driver: local
  redis_data:
    driver: local

# Network for inter-service communication
networks:
  mini-asistente-network:
    driver: bridge
